% By: Chandler Lagarde
% 10/14/2015
% Run SCCA design code
% apply the scale factors h, omega, and beta
clear
clc



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Constants %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
h = 1.5;
omega = 2*pi*10/60; 
betarise = 45*pi/180;
highdwell = 150*pi/180;
betafall = 90*pi/180;
lowdwell = 2*pi-(betarise+highdwell+betafall);
% This is the number of points used to map the dwells
N = 100; 



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SCCA Code %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The SCCA function allows you to select the type of SCCA fit and whether
% it's a rise or a fall. 
%
% You may want to open (BUT DO NOT MODIFY) the SCCA function to see how to
% specify the different functional fits, e.g. 'modified sine'
%
% SCCA generates row vectors that I paste together with the other dwell and 
% fall segments later in the code
[xrise yrise yprise ydblprise ytrplprise] = scca('modified sine','rise');



%%%%%%%%%%%%%%%%%%%%%%%%%%%% Matrix Dimensions %%%%%%%%%%%%%%%%%%%%%%%%%%
yhighdwell = ones(1,N);
yphighdwell = zeros(1,N);
ydblphighdwell = zeros(1,N);
ytrplphighdwell = zeros(1,N);

ylowdwell = zeros(1,N);
yplowdwell = zeros(1,N);
ydblplowdwell = zeros(1,N);
ytrplplowdwell = zeros(1,N);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% X & Y values %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Speed up the code by not calling the scca function all over
% [xfall yfall ypfall ydblpfall ytrplpfall]=scca('modified trapezoid','fall')
xfall = xrise;
yfall = 1-yrise;
ypfall = -yprise;
ydblpfall = -ydblprise;
ytrplpfall = -ytrplprise;



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Theta values %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The theta vectors corresponding to the rise, highdwell, fall, and low
% dwell segments are constructed below
thetarise = xrise*betarise;
thetahighdwell = betarise+[1:N]*highdwell/N;
thetafall = max(thetahighdwell)+betafall*xfall;
thetalowdwell = max(thetafall)+[1:N]*lowdwell/N;



%%%%%%%%%%%%%%%%%%%%%%%%%% Theta,S,V,A,J vectors %%%%%%%%%%%%%%%%%%%%%%%%
% The entire 360 degree set of theta, S, V, A, and J values are
% assembled into vectors
theta = [thetarise thetahighdwell thetafall thetalowdwell];
S = [yrise yhighdwell yfall ylowdwell]*h;
V = omega*h*[yprise/betarise yphighdwell ypfall/betafall yplowdwell];
A = omega^2*h*[ydblprise/betarise^2 ydblphighdwell ydblpfall/betafall^2 ydblplowdwell];
J = omega^3*h*[ytrplprise/betarise^3 ytrplphighdwell ytrplpfall/betafall^3 ytrplplowdwell];



%%%%%%%%%%%%%%%%%%%%%%%%%%%%% CAM Design %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Norton's velocity
v = V(1,:)/omega;
% Norton's acceleration
a = V(1,:)/omega^2;
% Epsilon is the eccentricity, or the offset of the CAM w/ respect to
% the follower
Epsilon = 0;
% Radius of the follower
Rf = 0.5;
% Guess of the radius of the base circle
Rb = 6;
% Prime circle radius of CAM 
Rp = Rf + Rb;



%%%%%%%%%%%%%%%%%%%%%%%%%%%% Pressure Angle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Phi has to be less than 30deg to assure 
phi = zeros(1,402);
for i=1:1:402
    phi (:,i) = atan2(v(i),(S(i)+Rp));
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%% Rho Cam Surface %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% If smallest absolute value of any negative rhocam, is less than Rf, then
% there is a problem. 
rhocam = zeros(1,402);
for i=1:1:402 
    rhocam (:,i) = (((Rb + S(i))^2 + (v(i))^2) ^ (3/2)) / ((Rb+S(i))^2 + 2*(v(i))^2 - a(i)*(Rb+S(i)));
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Plotting %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure(2)
subplot(1,2,1)
plot(theta*180/pi,phi*180/pi)
xlabel('Theta, deg')
ylabel('Phi, deg')
subplot(1,2,2)
plot(theta*180/pi,rhocam)
xlabel('Theta, deg')
ylabel('Rho Cam, mm')



% Figure 1 is generated by the SCCA function and shows only the normalized
% lift, velocity, and acceleration during the rise segment for the selected
% SCCA function type

% % figure(2)
% % subplot(2,2,1)
% % plot(theta*180/pi,S)
% % axis tight
% % xlabel('Theta, deg')
% % ylabel('Displacement, in')
% % grid on
% % subplot(2,2,2)
% % plot(theta*180/pi,V)
% % axis tight
% % xlabel('Theta, deg')
% % ylabel('Velocity, in/s')
% % grid on
% % subplot(2,2,3)
% % plot(theta*180/pi,A)
% % xlabel('Theta, deg')
% % ylabel('Acceleration, in/s^2')
% % axis tight
% % grid on
% % subplot(2,2,4)
% % plot(theta*180/pi,J)
% % axis tight
% % xlabel('Theta, deg')
% % ylabel('Jerk, in/s^3')
% % grid on

maxS = max(S);
maxV = max(V);
maxA = max(A);
maxJ = max(J);
