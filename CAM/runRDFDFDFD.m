% Run SCCA design code
% apply the scale factors h, omega, and beta
% By: Chandler Lagarde
% 10/12/2015
clear
clc



%%%%%%%%%%%%%%%%%%%%%%%% Constants %%%%%%%%%%%%%%%%%%%%
% Amount of seconds for complete revolution
totalcycle = 15;
% Reveolutions per minute
rpm = 60/totalcycle;
% Omega in radians per second
omega = 2*pi*rpm/60;

% Maximum height
h1 = 2.5;
rise1 = 40*pi/180;
dwell1 = 100*pi/180;
fall1 = 90*pi/180;

% Falls 1.5
h2 = 1.5;
dwell2 = 20*pi/180;
fall2 = 30*pi/180;

% Falls 0.5
h3 = 0.5;
dwell3 = 40*pi/180;
fall3 = 30*pi/180;

% Falls 0.5;
h4 = 0.5;
dwell4 = 2*pi-(rise1+dwell1+fall1+dwell2+fall2+dwell3+fall3);

%This is the number of points used to map the dwells
N = 100; 



%%%%%%%%%%%%%%%%%%% SCCA code %%%%%%%%%%%%%%%%%
% The SCCA function allows you to select the type of SCCA fit and whether
% it's a rise or a fall.
%
% You may want to open (BUT DO NOT MODIFY) the SCCA function to see how to
% specify the different functional fits, e.g. 'modified sine'
%
% SCCA generates row vectors that I paste together with the other dwell and 
% fall segments later in the code
[xrise yrise yprise ydblprise ytrplprise] = scca('modified trapezoid','rise');



%%%%%%%%%%% Pre-accolates matrix dimensions %%%%%%%%%%%%%
ydwell1 = h1*ones(1,N);
ypdwell1 = zeros(1,N);
ydblpdwell1 = zeros(1,N);
ytrplpdwell1 = zeros(1,N);

ydwell2 = (h1-h2)*ones(1,N);
ypdwell2 = zeros(1,N);
ydblpdwell2 = zeros(1,N);
ytrplpdwell2 = zeros(1,N);

ydwell3 = h3*ones(1,N);
ypdwell3 = zeros(1,N);
ydblpdwell3 = zeros(1,N);
ytrplpdwell3 = zeros(1,N);

ydwell4 = zeros(1,N);
ypdwell4 = zeros(1,N);
ydblpdwell4 = zeros(1,N);
ytrplpdwell4 = zeros(1,N);



%%%%%%%%%%%%%%%%%%%% X & Y values %%%%%%%%%%%%%%%%%%%%
xrise1 = xrise;
yrise1 = h1*yrise;
yprise1 = h1*yprise;
ydblprise1 = h1*ydblprise;
ytrplprise1 = h1*ytrplprise;

xfall1 = xrise;
yfall1 = h1-h2*yrise;
ypfall1 = -h2*yprise;
ydblpfall1 = -h2*ydblprise;
ytrplpfall1 = -h2*ytrplprise;

xfall2 = xrise;
yfall2 = (h1-h2)-h3*yrise;
ypfall2 = -h3*yprise;
ydblpfall2 = -h3*ydblprise;
ytrplpfall2 = -h3*ytrplprise;

xfall3 = xrise;
yfall3 = h3-h4*yrise;
ypfall3 = -h4*yprise;
ydblpfall3 = -h4*ydblprise;
ytrplpfall3 = -h4*ytrplprise;



%%%%%%%%%%% Theta Values %%%%%%%%%%%%%%%%%%
% The theta vectors corresponding to the rise, highdwell, fall, and low
% dwell segments are constructed below
thetarise = xrise1*rise1;

thetadwell1 = rise1+[1:N]*dwell1/N;
thetafall1 = max(thetadwell1)+fall1*xfall1;

thetadwell2 = max(thetafall1)+[1:N]*dwell2/N;
thetafall2 = max(thetadwell2)+fall2*xfall2;

thetadwell3 = max(thetafall2)+[1:N]*dwell3/N;
thetafall3 = max(thetadwell3)+fall3*xfall3;

thetadwell4 = max(thetafall3)+[1:N]*dwell3/N;




%%%%%%%%%%%% Theta,S,V,A,J Vectors %%%%%%%%%%%%%%%
% The entire 360 degree set of theta, S, V, A, and J values are
% assembled into vectors
theta = [thetarise thetadwell1 thetafall1 thetadwell2 thetafall2 thetadwell3 thetafall3 thetadwell4];
S = [yrise1 ydwell1 yfall1 ydwell2 yfall2 ydwell3 yfall3 ydwell4];
V = omega*[yprise1/rise1 ypdwell1 ypfall1/fall1 ypdwell2 ypfall2/fall2 ypdwell3 ypfall3/fall3 ypdwell4];
A = omega^2*[ydblprise1/rise1^2 ydblpdwell1 ydblpfall1/fall1^2 ydblpdwell2 ydblpfall2/fall2^2 ydblpdwell3 ydblpfall3/fall3^2 ydblpdwell4];
J = omega^3*[ytrplprise1/rise1^3 ytrplpdwell1 ytrplpfall1/fall1^3 ytrplpdwell2 ytrplpfall2/fall2^3 ytrplpdwell3 ytrplpfall3/fall3^3 ytrplpdwell4];



%%%%%%%%%%%% Plotting %%%%%%%%%%%%%%
% Figure 1 is generated by the SCCA function and shows only the normalized
% lift, velocity, and acceleration during the rise segment for the selected
% SCCA function type
%
% Plotting of Figure 2
figure(2)
subplot(2,2,1)
plot(theta*180/pi,S)
axis tight
xlabel('Theta, deg')
ylabel('Displacement, in')
grid on
subplot(2,2,2)
plot(theta*180/pi,V)
axis tight
xlabel('Theta, deg')
ylabel('Velocity, in/s')
grid on
subplot(2,2,3)
plot(theta*180/pi,A)
xlabel('Theta, deg')
ylabel('Acceleration, in/s^2')
axis tight
grid on
subplot(2,2,4)
plot(theta*180/pi,J)
axis tight
xlabel('Theta, deg')
ylabel('Jerk, in/s^3')
grid on

maxS = max(S);
maxV = max(V);
maxA = max(A);
maxJ = max(J);
